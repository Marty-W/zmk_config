/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 2

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/international_chars/czech.dtsi"


// NODEFREE docs: https://github.com/urob/zmk-nodefree-config
// ZMK KEYCODES: https://zmk.dev/docs/codes
// REPO: https://github.com/Marty-W/zmk_config


//global settings
#define ___ &trans
#define xx &none

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define SYM 1
#define NAV 2
#define NUM 3
#define CZE 4


&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};


/*
 COMBOS

 KEYBOARD POSITIONS for combos
 ╭────────────────────┬──────────────────────╮
 │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
 │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
 │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
 ╰──────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭────────╯
*/

// COMBOS
ZMK_COMBO(combo_raycast, &kp LG(SPACE), LH1 RH1, ALL)
ZMK_COMBO(combo_vimesc, &kp ESC, RM1 RM2, ALL)
ZMK_COMBO(combo_copy, &kp LG(C), LB4 LB2,  ALL)
ZMK_COMBO(combo_paste, &kp LG(V), LB4 LB1,  ALL)
ZMK_COMBO(combo_select_all, &kp LG(A), LB4 LB0, ALL)
ZMK_COMBO(combo_lpar, &kp LPAR, LB2 LB1, ALL)
ZMK_COMBO(combo_rpar, &kp RPAR, LB1 LB0, ALL)
ZMK_COMBO(combo_lbkt, &kp LBKT, LM2 LM1, ALL)
ZMK_COMBO(combo_rbkt, &kp RBKT, LM1 LM0, ALL)
ZMK_COMBO(combo_lbrc, &kp LBRC, LT2 LT1, ALL)
ZMK_COMBO(combo_rbrc, &kp RBRC, LT1 LT0, ALL)
ZMK_COMBO(combo_capsword, &caps_word, LM3 LM2, ALL)


// czech layer
ZMK_COMBO(combo_czech, &sl 4, RT1 RT2, ALL)

// MACROS
ZMK_BEHAVIOR(sgm, macro_one_param,
    bindings =
        <&kp SPACE>,
        <&macro_param_1to1>,
        <&kp MACRO_PLACEHOLDER>;
    wait-ms = <2>;
    tap-ms = <2>;
)


// HOMEROW MODS 
#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
ZMK_BEHAVIOR(NAME, hold_tap, \
    flavor = "balanced"; \
    tapping-term-ms = <280>; \
    quick-tap-ms = <QUICK_TAP_MS>; \
    require-prior-idle-ms = <170>; \
    bindings = <HOLD>, <TAP>; \
    hold-trigger-key-positions = <TRIGGER_POS>; \
    hold-trigger-on-release; \
)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
// MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

// tap: num-word | double-tap: sticky num-layer | hold: nav-layer
//
#define SMART_NUM &smart_num NAV 2
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};


// ALIASES 
#define HYPER &kp LS(LA(LC(LG(LEFT_GUI))))
#define LSC &mt LESS_THAN COMMA
#define SPACE1 &kp LS(LA(LC(LG(N1))))
#define SPACE2 &kp LS(LA(LC(LG(N2))))
#define SPACE3 &kp LS(LA(LC(LG(N3))))
#define SPACE4 &kp LS(LA(LC(LG(N4))))
#define SPACE5 &kp LS(LA(LC(LG(N5))))
#define SPACE6 &kp LS(LA(LC(LG(N6))))


ZMK_LAYER(default_layer,
// ╭──┬───────────┬───────────┬─────────────┬────────────┬─────╮╭──────┬────────────┬─────────────┬───────────┬───────────────┬──╮
    xx &kp Q       &kp W       &kp E         &kp R        &kp T  &kp Y  &kp U        &kp I         &kp O       &kp P           xx
// ├──┼───────────┼───────────┼─────────────┼────────────┼─────┤├──────┼────────────┼─────────────┼───────────┼───────────────┼──┤
    xx &kp A       &hml LALT S &hml LGUI D   &hml LCTRL F &kp G  &kp H  &hmr RCTRL J &hmr RGUI K   &hmr RALT L &kp COLON       xx
// ├──┼───────────┼───────────┼─────────────┼────────────┼─────┤├──────┼────────────┼─────────────┼───────────┼───────────────┼──┤
    xx &kp Z       &kp X       &kp C         &kp V        &kp B  &kp N  &kp M        &mt LT COMMA  &mt GT DOT  &mt QMARK SLASH xx
// ╰──┼───────────┼───────────┼─────────────┼────────────┼─────┤├──────┼────────────┼─────────────┼───────────┼───────────────┼──┤
                                   &kp TAB &mt LSHIFT BSPC  SMART_NUM   &lt 1 ENTER &kp SPACE HYPER
        //                        ╰───────┴─────────┴──────────╯╰───────────┴─────────┴─────╯
)
  

ZMK_LAYER(lower_layer,
    // ╭──┬───────┬──────┬──────────┬─────────┬─────────╮╭────────┬───────────┬─────────┬──────┬──────┬──╮
        xx &trans  &trans &kp AT     &kp DQT   &kp UNDER  &kp EXCL &kp STAR    &kp CARET &trans &trans xx
    // ├──┼───────┼──────┼──────────┼─────────┼─────────┤├────────┼───────────┼─────────┼──────┼──────┼──┤
        xx &trans  &trans &kp DOLLAR &kp APOS  &kp MINUS  &kp AMPS &kp PLUS    &kp MINUS &trans &trans xx
    // ├──┼───────┼──────┼──────────┼─────────┼─────────┤├────────┼───────────┼─────────┼──────┼──────┼──┤
        xx &trans  &trans &kp HASH   &kp GRAVE &kp TILDE  &kp PIPE &kp PERCENT &kp BSLH  &trans &trans xx
    // ╰──┼───────┼──────┼──────────┼─────────┼─────────┤├────────┼───────────┼─────────┼──────┼──────┼──┤
                          &kp SEMI   &kp EQUAL &kp GT     &trans   &trans      &trans
    //                   ╰──────────┴─────────┴─────────╯╰────────┴───────────┴─────────╯
)

ZMK_LAYER(raise_layer,
    // ╭──┬─────────────┬─────────────┬───────────┬────────────┬────────────╮╭────────────┬──────────┬──────────┬──────────┬─────────────┬──╮
        xx SPACE5        SPACE4        SPACE3      SPACE2       SPACE1        &kp LA(N1)   &kp LA(N2) &kp LA(N3) &kp LA(N4) &kp LA(N5)    xx
    // ├──┼─────────────┼─────────────┼───────────┼────────────┼────────────┤├────────────┼──────────┼──────────┼──────────┼─────────────┼──┤
        xx &kp C_BRI_DEC &kp C_BRI_INC &kp C_MUTE  &kp C_VOL_DN &kp C_VOL_UP  &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT  &out OUT_BLE  xx
    // ├──┼─────────────┼─────────────┼───────────┼────────────┼────────────┤├────────────┼──────────┼──────────┼──────────┼─────────────┼──┤
        xx &trans        &trans        &kp C_PREV  &kp C_PP     &kp C_NEXT    &sgm N1      &sgm N2    &sgm N3    &sgm N4    &sgm N5       xx
    // ╰──┼─────────────┼─────────────┼───────────┼────────────┼────────────┤├────────────┼──────────┼──────────┼──────────┼─────────────┼──┤
                                       &trans      &trans       &trans        &kp LC(BSPC) &kp HOME   &kp END
    //                                ╰───────────┴────────────┴────────────╯╰────────────┴──────────┴──────────╯
)


ZMK_LAYER(num_layer,
    // ╭──┬──────┬──────┬──────┬──────┬──────╮   ╭──────┬──────┬──────┬──────┬──────┬──╮
        xx &trans &kp N1 &kp N2 &kp N3 &trans     &trans &trans &trans &trans &trans xx
    // ├──┼──────┼──────┼──────┼──────┼──────┤   ├──────┼──────┼──────┼──────┼──────┼──┤
        xx &trans &kp N4 &kp N5 &kp N6 &trans     &trans &trans &trans &trans &trans xx
    // ├──┼──────┼──────┼──────┼──────┼──────┤   ├──────┼──────┼──────┼──────┼──────┼──┤
        xx &trans &kp N7 &kp N8 &kp N9 &trans     &trans &trans &trans &trans &trans xx
    // ╰──┼──────┼──────┼──────┼──────┼──────┤   ├──────┼──────┼──────┼──────┼──────┼──┤
                         &kp N0 &trans &to 0      &trans &trans &trans
    //                  ╰──────┴──────┴──────╯   ╰──────┴──────┴──────╯
)

ZMK_LAYER(cze_layer,
    // ╭──┬──────┬──────┬──────┬───────────┬──────╮   ╭──────┬──────┬──────┬──────┬──────┬──╮
        xx &trans &cs_ea &cs_ec &cs_rc      &cs_tc     &cs_ya &cs_ur &cs_ia &cs_oa &trans xx
    // ├──┼──────┼──────┼──────┼───────────┼──────┤   ├──────┼──────┼──────┼──────┼──────┼──┤
        xx &cs_aa &cs_sc &cs_dc &trans      &trans     &trans &cs_ua &trans &trans &trans xx
    // ├──┼──────┼──────┼──────┼───────────┼──────┤   ├──────┼──────┼──────┼──────┼──────┼──┤
        xx &cs_zc &trans &cs_cc &trans      &trans     &cs_nc &trans &trans &trans &trans xx
    // ╰──┼──────┼──────┼──────┼───────────┼──────┤   ├──────┼──────┼──────┼──────┼──────┼──┤
                         &trans &kp LSHIFT  &trans     &trans &trans &trans
    //                  ╰──────┴───────────┴──────╯   ╰──────┴──────┴──────╯
)

