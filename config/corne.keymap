/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC       &kp Q  &kp W  &kp E             &kp R           &kp T              &kp Y               &kp U           &kp I               &kp O    &kp P     &trans
&kp TAB       &kp A  &kp S  &kp D             &kp F           &kp G              &mt LEFT_CONTROL H  &mt LEFT_ALT J  &mt LEFT_COMMAND K  &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LEFT_ALT  &kp Z  &kp X  &kp C             &kp V           &kp B              &kp N               &kp M           &kp COMMA           &kp DOT  &kp FSLH  &kp LS(LA(LC(LEFT_COMMAND)))
                            &kp LEFT_COMMAND  &kp LEFT_SHIFT  &lt 2 BACKSPACE    &lt 1 ENTER         &kp SPACE       &kp LEFT_CONTROL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| 1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans     &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSLH
&trans     &kp N1    &kp N2  &kp N3    &kp N4    &kp N5       &kp MINUS  &kp EQUAL  &kp GRAVE        &kp LBKT  &kp RBKT  &kp PIPE
&kp LSHFT  &kp N6    &kp N7  &kp N8    &kp N9    &kp N0       &kp UNDER  &kp PLUS   &kp TILDE        &kp LBRC  &kp RBRC  &kp RSHFT
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans      &kp LS(LA(LC(LG(NUMBER_1))))  &kp LS(LA(LC(LG(NUMBER_2))))  &kp LS(LA(LC(LG(NUMBER_3))))  &kp LS(LA(LC(LG(NUMBER_4))))  &kp LS(LA(LC(LG(NUMBER_5))))    &kp F6            &kp F7      &kp F8      &kp F9     &kp C_VOLUME_UP  &trans
&trans      &kp F5                        &kp LS(LA(LC(LG(A))))         &kp LS(LA(LC(LG(S))))         &kp LS(LA(LC(LG(W))))         &kp LS(LA(LC(LG(D))))           &kp LEFT          &kp DOWN    &kp UP      &kp RIGHT  &kp C_VOL_DN     &trans
&bt BT_CLR  &kp F6                        &kp LS(LC(LA(LG(H))))         &kp LS(LA(LC(LG(J))))         &kp LS(LA(LC(LG(K))))         &kp LS(LA(LC(LG(L))))           &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_PREV  &trans     &trans           &trans
                                                                        &trans                        &trans                        &trans                          &trans            &trans      &trans
            >;
        };
    };
};
